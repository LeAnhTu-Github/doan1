datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin", "darwin-arm64"]
}

model Course {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  userId         String
  title          String
  description    String?
  imageUrl       String?
  price          Float?
  isPublished    Boolean          @default(false)
  categoryId     String?          @db.ObjectId
  category       Category?        @relation(fields: [categoryId], references: [id])
  chapters       Chapter[]
  attachments    Attachment[]
  purchases      Purchase[]
  courseRegister courseRegister[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

model courseRegister {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  courseId   String   @db.ObjectId
  userId     String
  masv       String?
  name       String?
  email      String?
  class      String?
  isRegister Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  course     Course   @relation(fields: [courseId], references: [id])
}

model Category {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  name    String   @unique
  courses Course[]
}

model Attachment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  url       String
  courseId  String   @db.ObjectId
  course    Course   @relation(fields: [courseId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Chapter {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  description  String?
  videoUrl     String?
  position     Int
  isPublished  Boolean        @default(false)
  isFree       Boolean        @default(false)
  muxData      MuxData?
  courseId     String         @db.ObjectId
  course       Course         @relation(fields: [courseId], references: [id])
  userProgress UserProgress[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model MuxData {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  assetId    String
  playbackId String?
  chapterId  String  @unique @db.ObjectId
  chapter    Chapter @relation(fields: [chapterId], references: [id])
}

model UserProgress {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String
  chapterId   String   @db.ObjectId
  chapter     Chapter  @relation(fields: [chapterId], references: [id])
  isCompleted Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId, chapterId])
}

model Purchase {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String
  courseId  String   @db.ObjectId
  course    Course   @relation(fields: [courseId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model StripeCustomer {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  userId           String   @unique
  stripeCustomerId String   @unique
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model User {
  id                  String               @id @default(auto()) @map("_id") @db.ObjectId
  clerkUserId         String               @unique // ID c·ªßa Clerk
  masv                String?
  name                String?
  email               String?              @unique
  class               String?
  department          String?
  image               String?
  role                String?
  contestParticipants ContestParticipant[]
  submissions         Submission[]
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
}

model Event {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String
  title       String
  name        String?
  date        String?
  link        String?
  author      String?
  host        String?
  imageUrl    String?
  address     String?
  description String?
  codeQR      String?
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model userRegister {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String
  eventId    String
  masv       String?
  name       String?
  email      String?
  class      String?
  question   String?
  isRegister Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Score {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String
  testId    String
  masv      String?
  name      String?
  class     String?
  score     Float?
  rank      Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Problem {
  id               String           @id @default(auto()) @map("_id") @db.ObjectId
  title            String?
  difficulty       String?
  category         String?
  language         Int?
  time             DateTime?
  order            Int?
  testCases        TestCase[]
  problemStatement String
  examples         Json
  constraints      String
  status           Boolean?
  metadata        Json             // L∆∞u th√¥ng tin v·ªÅ input/output format
  codeTemplate    Json             // L∆∞u template code cho c√°c ng√¥n ng·ªØ kh√°c nhau
  functionName    String          // T√™n h√†m c·∫ßn implement
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  contestProblems  ContestProblem[]
  submissions      Submission[]
}

model TestCase {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  problemId String   @db.ObjectId
  problem   Problem  @relation(fields: [problemId], references: [id])
  input     Json
  expected  String // K·∫øt qu·∫£ mong ƒë·ª£i
  isHidden  Boolean  @default(false) // Tr·∫°ng th√°i test case (·∫©n hay kh√¥ng)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Contest: Th√¥ng tin v·ªÅ cu·ªôc thi
model Contest {
  id           String               @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  description  String?
  imageUrl     String?
  startTime    DateTime
  endTime      DateTime
  problems     ContestProblem[]
  participants ContestParticipant[]
  submissions  Submission[] // Li√™n k·∫øt v·ªõi b√†i n·ªôp
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt

  // üîπ Th√™m c√°c tr∆∞·ªùng m·ªõi
  joinCode String? @unique // M√£ tham gia cu·ªôc thi
  qrCode   String? // L∆∞u URL m√£ QR ho·∫∑c ƒë∆∞·ªùng d·∫´n ·∫£nh
  isPublic Boolean @default(false) // C√¥ng khai hay kh√¥ng
  status   String  @default("upcoming") // Tr·∫°ng th√°i cu·ªôc thi (upcoming, ongoing, ended)
}

model ContestProblem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  contestId String  @db.ObjectId
  problemId String  @db.ObjectId
  contest   Contest @relation(fields: [contestId], references: [id], onDelete: Cascade)
  problem   Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)
}

model ContestParticipant {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  contestId String  @db.ObjectId
  userId    String  @db.ObjectId
  score     Float   @default(0)
  rank      Int?
  contest   Contest @relation(fields: [contestId], references: [id], onDelete: Cascade)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([contestId, userId]) // ƒê·∫£m b·∫£o m·ªói ng∆∞·ªùi ch·ªâ tham gia 1 l·∫ßn
}

model Submission {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  contestId   String   @db.ObjectId
  problemId   String   @db.ObjectId
  code        String
  language    String
  status      String // (Accepted, Wrong Answer, Time Limit Exceeded, etc.)
  score       Float?
  submittedAt DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  contest     Contest  @relation(fields: [contestId], references: [id], onDelete: Cascade)
  problem     Problem  @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([userId, contestId, problemId]) // M·ªói ng∆∞·ªùi c√≥ th·ªÉ n·ªôp b√†i nhi·ªÅu l·∫ßn nh∆∞ng ch·ªâ l∆∞u ƒëi·ªÉm cao nh·∫•t
}
