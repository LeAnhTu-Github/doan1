datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin", "darwin-arm64"]
}
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  imageUrl          String?
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}
model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
model Course {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  userId         String
  title          String
  description    String?
  imageUrl       String?
  price          Float?
  isPublished    Boolean          @default(false)
  categoryId     String?          @db.ObjectId
  category       Category?        @relation(fields: [categoryId], references: [id])
  chapters       Chapter[]
  attachments    Attachment[]
  courseRegister courseRegister[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

model courseRegister {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  courseId   String   @db.ObjectId
  userId     String
  masv       String?
  name       String?
  email      String?
  class      String?
  isRegister Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  course     Course   @relation(fields: [courseId], references: [id])
}

model Category {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  name    String   @unique
  courses Course[]
}

model Attachment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  url       String
  courseId  String   @db.ObjectId
  course    Course   @relation(fields: [courseId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Chapter {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  description  String?
  videoUrl     String?
  position     Int
  isPublished  Boolean        @default(false)
  isFree       Boolean        @default(false)
  muxData      MuxData?
  courseId     String         @db.ObjectId
  course       Course         @relation(fields: [courseId], references: [id])
  userProgress UserProgress[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model MuxData {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  assetId    String
  playbackId String?
  chapterId  String  @unique @db.ObjectId
  chapter    Chapter @relation(fields: [chapterId], references: [id])
}

model UserProgress {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String
  chapterId   String   @db.ObjectId
  chapter     Chapter  @relation(fields: [chapterId], references: [id])
  isCompleted Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId, chapterId])
}

model User {
  id                  String               @id @default(auto()) @map("_id") @db.ObjectId
  masv                String?
  name                String?
  email               String?              @unique
  emailVerified       DateTime?           // Thêm trường này cho NextAuth
  class               String?
  department          String?
  image               String?
  password            String?
  role                String?
  accounts            Account[]           // Thêm relation với Account
  sessions            Session[]           // Thêm relation với Session
  contestParticipants ContestParticipant[]
  submissions         Submission[]
  practiceSubmissions PracticeSubmission[]
  ranking             UserRanking?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
}

model Event {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String
  title       String
  name        String?
  date        DateTime?
  link        String?
  author      String?
  host        String?
  imageUrl    String?
  address     String?
  description String?
  codeQR      String?
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model userRegister {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String
  eventId    String
  masv       String?
  name       String?
  email      String?
  class      String?
  question   String?
  isRegister Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Problem {
  id                 String               @id @default(auto()) @map("_id") @db.ObjectId
  title              String?
  difficulty         String?
  category           String?
  language           Int?
  time               DateTime?
  order              Int?
  testCases          TestCase[]
  problemStatement   String
  examples           Json
  constraints        String
  status             Boolean?
  mode               Boolean?
  metadata           Json             // Lưu thông tin về input/output format
  codeTemplate       Json             // Lưu template code cho các ngôn ngữ khác nhau
  functionName       String          // Tên hàm cần implement
  contestProblems    ContestProblem[]
  submissions        Submission[]
  practiceSubmissions PracticeSubmission[]
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
}

model TestCase {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  problemId String   @db.ObjectId
  problem   Problem  @relation(fields: [problemId], references: [id])
  input     Json
  expected  String // Kết quả mong đợi
  isHidden  Boolean  @default(false) // Trạng thái test case (ẩn hay không)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Contest: Thông tin về cuộc thi
model Contest {
  id           String               @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  description  String?
  imageUrl     String?
  startTime    DateTime            // Giữ lại để thông báo thời gian bắt đầu
  duration     Int                 @default(60)  // Thời gian làm bài tính bằng phút
  isActive     Boolean             @default(false) // Trạng thái bật/tắt cuộc thi
  problems     ContestProblem[]
  participants ContestParticipant[]
  submissions  Submission[]
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  joinCode     String?             @unique
  qrCode       String?
  isPublic     Boolean             @default(false)
  status       String              @default("upcoming")
}

model ContestProblem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  contestId String  @db.ObjectId
  problemId String  @db.ObjectId
  contest   Contest @relation(fields: [contestId], references: [id], onDelete: Cascade)
  problem   Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)
}

model ContestParticipant {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  contestId   String    @db.ObjectId
  userId      String?   @db.ObjectId
  score       Float     @default(0)
  rank        Int?
  startedAt   DateTime? 
  finishedAt  DateTime? 
  contest     Contest   @relation(fields: [contestId], references: [id], onDelete: Cascade)
  user        User?     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([contestId, userId])
}

model Submission {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String?  @db.ObjectId       
  contestId   String   @db.ObjectId
  problemId   String   @db.ObjectId
  code        String
  language    String
  status      String
  score       Float?
  submittedAt DateTime @default(now())
  user        User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  contest     Contest  @relation(fields: [contestId], references: [id], onDelete: Cascade)
  problem     Problem  @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([userId, contestId, problemId])
}

// Thêm model mới để theo dõi submissions cho practice problems
model PracticeSubmission {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String?  @db.ObjectId        // Tạm thời cho phép null
  problemId   String   @db.ObjectId
  code        String
  language    String
  status      String
  score       Float?
  submittedAt DateTime @default(now())
  user        User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem     Problem  @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([userId, problemId])
}

// Thêm model để theo dõi thứ hạng tổng thể của người dùng
model UserRanking {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String?  @db.ObjectId        // Tạm thời cho phép null
  totalScore  Float    @default(0)
  solvedCount Int      @default(0)
  rank        Int?
  user        User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  updatedAt   DateTime @updatedAt

  @@unique([userId])
}
